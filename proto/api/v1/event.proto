syntax = "proto3";

option go_package = "github.com/o7studios/octopus-sdk/sdk/golang/gen/api/v1;apiv1";

package api.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

/**
 * EntryMutation
 *
 * Represents a mutation (create, update, delete) operation on an entry.
 *
 * The mutation can be one of the following types:
 *   - CREATE: create a new entry
 *   - UPDATE: update an existing entry
 *   - DELETE: delete an entry permanently
 *   - SOFT_DELETE: mark an entry as deleted without removing it immediately
 */
message EntryMutation {
  enum MutationType {
    MUTATION_TYPE_UNSPECIFIED = 0;
    MUTATION_CREATE = 1;
    MUTATION_UPDATE = 2;
    MUTATION_DELETE = 3;
    MUTATION_SOFT_DELETE = 4;
  }

  // The type of mutation to perform.
  MutationType type = 1;

  // The data payload associated with the mutation.
  google.protobuf.Value data = 3;

  // Timestamp when the entry expires and should no longer be visible to clients.
  optional google.protobuf.Timestamp expired_at = 5;

  // Timestamp when the entry should be deleted from the database.
  optional google.protobuf.Timestamp deleted_at = 6;
}

/**
 * Translation
 *
 * Contains a translated message for a specific locale.
 */
message Translation {
  // Locale country code (e.g., "en-US", "de-DE").
  string code = 1;

  // The translated content string.
  string content = 2;
}

/**
 * PlayerNotification
 *
 * A notification message sent to a player, containing multiple translations.
 * Typically emitted by independent services.
 *
 * Examples:
 *   - Player bought a rank in the store
 *   - Player won a giveaway on Discord
 *   - External services notifying a player
 */
message PlayerNotification {
  // List of translated messages; the player's locale will be selected automatically.
  repeated Translation translations = 1;
}

/**
 * Event
 *
 * Represents an event that can occur across services, such as sending notifications,
 * modifying entries, or just any abstract data.
 *
 * The event is identified by a key which follows the format:
 * <system>::<field>::<uuid>
 *
 * - system: The system emitting the event (e.g., SkyWars, Lobby, Shop)
 * - field: The field the system updates (e.g., Permission, Joins, Kills)
 * - uuid: UUID of a Minecraft player or a database object
 */
message Event {
  // The event key used for subscriptions.
  string key = 1;

  oneof body {
    google.protobuf.Any data = 2;
    EntryMutation entry_mutation = 3;
    PlayerNotification player_notification = 4;
  }
}

/**
 * EventHandler
 *
 * Represents an handler which listens to an event on a specific key.
 * It's priority defines when it shall be called.
 */
message EventHandler {
  // Identifier of the handler (e.g. service-name-handler-id)
  string identifier = 1;

  // Key to subscribe to
  string key = 2;

  enum Priority {
    PRIORITY_UNSPECIFIED = 0;
    LOWEST               = 1;
    LOW                  = 2;
    NORMAL               = 3;
    HIGH                 = 4;
    HIGHEST              = 5;
    MONITOR              = 6;
  }

  // Priority defines when this handler shall be called. Lower is later. Default normal.
  optional Priority priority = 3;
}

message EventCall {
  // Identifier of the handler (e.g. service-name-handler-id)
  string identifier = 1;

  Event event = 2;
}