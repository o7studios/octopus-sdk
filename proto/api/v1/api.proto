syntax = "proto3";

option go_package = "github.com/o7studios/octopus-sdk/sdk/golang/gen/api/v1;apiv1";

package api.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

/*
 * Translation
 * Used to send translated messages to player
 */
message Translation {

  // Locale Country Code (e.g. en-US, de-De)
  string code = 1;

  // Translated Content
  string content = 2;
}

/**
 * Player Notification
 * Used to send a translated message to a player.
 * This notification will be mostly send from independent services
 *
 * Examples what a notification can be:
 * - A player bought a rank on the store
 * - A player won a giveaway on the discord
 * - A external service want to notify a player
 */
message PlayerNotification {

  // List of translations, players locale will be picked from Octopus.
  repeated Translation translations = 1;
}

/**
 * EntryEdit
 * Used for making CRUD Statements to an entry
 */
message EntryEdit {

  // Statement if the Entry should be deleted, updated or created
  enum EntryType {
    ENTRY_TYPE_UNKNOWN = 0;
    ENTRY_TYPE_CREATE = 1;
    ENTRY_TYPE_UPDATE = 2;
    ENTRY_TYPE_DELETE = 3;
    ENTRY_TYPE_SOFT_DELETE = 4;
  }

  EntryType change_type = 1;

  // The Entry of context
  google.protobuf.Value value = 3;

  // Date of the expiration
  // If this date is reached, this entry will not be available for a client
  // (in seconds)
  optional int64 time_to_live = 4;

  // Date of deletion
  // If this date is reached, this entry will be deleted in the database
  // (in seconds)
  optional int64 time_to_act = 5;
}

/**
 * Action
 * An action is an abstract concept of an action a service should make
 *
 * Examples what an action can be:
 * - Send a player to another server
 * - Shut a server down or call a specific function
 * - Tell a server he should prepare for something
 */
message Action {

  // The name of an action
  string action_name = 1;

  // The body of an action
  map<string, google.protobuf.Value> metadata = 2;
}

/**
 * Event
 *
 * The event is a collection of scenarios that can happen between services
 * This includes:
 * - Sending a notification
 * - Manipulate a Entry
 * - Call an action
 *
 * The event has a key, that a service can subscribe to to get updated live
 */
message Event {

  /**
   * Key
   * The key abstract identifier concept
   * It will be used to subscribe to
   * It is required that the key follows a specific format:
   * <system>::<field>::<uuid>
   *
   * System: This is the system that emitted the event. (e.g. SkyWars, Lobby, Shop...)
   * Filed: Name of the field the system will set (e.g. Permission, Joins, Kills...)
   * UUID: UUID of a Minecraft Player that the entry is set to or a database uuid of an object
   */
  string key = 1;

  // The event that will be called
  oneof body {
    PlayerNotification player_notification = 2;
    EntryEdit entry = 3;
    Action action = 4;
  }
}

/**
 * SubscriptionRequest
 * Will subscribe to the list of given keys
 */
message SubscriptionRequest {

  // Identifier of the service (e.g. service-name)
  string identifier = 1;

  // List of keys to subscribe to
  repeated string keys = 2;
}

/**
 * SubscriptionRequest
 * Will return the events that were called on the key
 */
message SubscriptionResponse {

  // List of emitted events
  repeated Event events = 1;
}

/**
 * EmitEventResponse
 */
message EmitEventResponse {

  // Will be true if the event was successful
  bool success = 1;
}

/**
 * EntryRequest
 * Request for looking up a Entry
 */
message EntryRequest {

  // Key of the Entry
  string key = 1;

  // Optional filter to find specific objects
  optional string filter = 2;
}

/**
 * Entry
 * A Entry is an abstract concept.
 * A Entry can embody everything from normal objects to just simple primitives
 *
 * Examples what a Entry can be:
 * - Kills of a User for a game mode (permanent) => Stats in general
 * - Database objects like kits, clans...
 * - Friend Requests, a party a cached Flag (temporary)
 * - The list of all user on the network (temporary)
 */
message Entry {
  string key = 1;
  google.protobuf.Value body = 2;
  google.protobuf.Timestamp created_at = 3;
  optional google.protobuf.Timestamp updated_at = 4;
  optional google.protobuf.Timestamp expired_at = 5;
  optional google.protobuf.Timestamp deleted_at = 6;
}

message EntryResponse {
  repeated Entry entries = 1;
}

service EventService {
  rpc EmitEvent(Event) returns (EmitEventResponse);
  rpc GetEntry(EntryRequest) returns (EntryResponse);
}

service SubscriptionService {
  rpc Subscription(stream SubscriptionRequest) returns (stream SubscriptionResponse);
}