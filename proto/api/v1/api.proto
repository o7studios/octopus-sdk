syntax = "proto3";

option go_package = "github.com/o7studios/octopus-sdk/sdk/golang/gen/api/v1;apiv1";

package api.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";


service Octopus {
  /**
   * Retrieves existing entries from the database matching a
   * key pattern. Can optionally include expired objects and
   * filter by revision creation time.
   */
  rpc Get(GetRequest) returns (GetResponse);

  /**
   * Stores an object on key with new revision in the database.
   */
  rpc Write(Object) returns (google.protobuf.Empty);

  /**
   * Stores an object on key with new revision in the database
   * and returns the stored version, including the revision
   * and ID.
   */
  rpc Call(Object) returns (Entry);

  /**
   * Bidirectional stream for real-time updates. Clients
   * register for key-patterns (ListenRegister) and receive
   * events (EventCall).
   *
   * Step 1: Registration
   *
   * The client must first send a `ListenRegister` message
   * to specify which key-pattern to listen to.
   *
   * Step 2: Event Reception
   *
   * After registration, the server sends `EventCall` messages
   * for objects matching the registered key-pattern.
   *
   * Rules:
   *
   * 1. Only one registration per stream is allowed.
   *
   * 2. After registration, the server sends `EventCall` messages
   * which have to be sent back for acknowledgement
   * (and possibly modification).
   */
  rpc Listen(stream ListenMessage) returns(stream EventCall);
}

/**
 * Represents a flexible data object.
 */
message Object {
  // Unique key identifying the object.
  string key = 1;

  // Flexible JSON-like data structure.
  google.protobuf.Struct data = 2;

  // Timestamp when the object should no longer be visible by default.
  optional google.protobuf.Timestamp expired_at = 4;

  // Timestamp when the object should be permanently deleted.
  optional google.protobuf.Timestamp deleted_at = 5;
}

/**
 * A versioned object with metadata from database.
 */
message Entry {
  // The underlying object.
  Object object = 1;

  // Entry creation timestamp.
  google.protobuf.Timestamp created_at = 2;

  // Revision number, incremented on every update.
  int64 revision = 3;

  // Unique identifier for this entry.
  string id = 4;
}

/**
 * Filters and options for `Get` RPC.
 */
message GetRequest {
  // Pattern to match keys. Supports wildcards:
  //   *  — matches exactly one token (between dots), e.g., "foo.*.bar" matches "foo.x.bar" but not "foo.x.y.bar"
  //   >  — matches one or more tokens until the end, e.g., "foo.>" matches "foo", "foo.bar", "foo.bar.baz", etc.
  // Multiple wildcards can be used in a single pattern. Tokens are dot-separated.
  string key_pattern = 1;

  // Whether to include expired objects.
  optional bool include_expired = 2;

  // Start timestamp to filter creation time.
  optional google.protobuf.Timestamp created_at_range_start = 3;

  // End timestamp to filter creation time.
  optional google.protobuf.Timestamp created_at_range_end = 4;
}

/**
 * Result of `Get` RPC.
 */
message GetResponse {
  // List of found entries including revision, ID and timestamps.
  repeated Entry entries = 1;
}

/**
 * Message type for the listen stream.
 */
message ListenMessage {
  oneof msg {
    EventCall callback = 1;
    ListenRegister register = 2;
  }
}

/**
 * Represents a event in the stream.
 */
message EventCall {
  // The affected object.
  Object object = 1;

  // Unique ID for this event call (useful for tracking).
  string call_id = 2;
}

/**
 * Registers the stream for real-time updates on specific
 * key pattern.
 */
message ListenRegister {
  // Key pattern the client wants to listen to.
  string key_pattern = 1;

  // Priority of the registration (e.g. determines event order; lower is later).
  int32 priority = 2;
}