// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/service.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OctopusService_CallEvent_FullMethodName          = "/api.v1.OctopusService/CallEvent"
	OctopusService_RegisterListener_FullMethodName   = "/api.v1.OctopusService/RegisterListener"
	OctopusService_UnregisterListener_FullMethodName = "/api.v1.OctopusService/UnregisterListener"
	OctopusService_Listen_FullMethodName             = "/api.v1.OctopusService/Listen"
	OctopusService_GetEntry_FullMethodName           = "/api.v1.OctopusService/GetEntry"
)

// OctopusServiceClient is the client API for OctopusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OctopusServiceClient interface {
	// *
	// CallEvent
	//
	// Calls an event to all it's listeners and returns
	// with a possibly modified version from the listeners.
	CallEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	// *
	// RegisterListener
	//
	// Registers an event handler.
	RegisterListener(ctx context.Context, in *EventHandler, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// *
	// UnregisterListener
	//
	// Unregisters an event handler.
	UnregisterListener(ctx context.Context, in *EventHandler, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// *
	// Listen
	//
	// Listens for events on the registered handlers.
	// Replies with a (possibly) modified response call (e.g. cancel).
	Listen(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EventCall, EventCall], error)
	GetEntry(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*EntryResponse, error)
}

type octopusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOctopusServiceClient(cc grpc.ClientConnInterface) OctopusServiceClient {
	return &octopusServiceClient{cc}
}

func (c *octopusServiceClient) CallEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, OctopusService_CallEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *octopusServiceClient) RegisterListener(ctx context.Context, in *EventHandler, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OctopusService_RegisterListener_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *octopusServiceClient) UnregisterListener(ctx context.Context, in *EventHandler, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OctopusService_UnregisterListener_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *octopusServiceClient) Listen(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EventCall, EventCall], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OctopusService_ServiceDesc.Streams[0], OctopusService_Listen_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventCall, EventCall]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OctopusService_ListenClient = grpc.BidiStreamingClient[EventCall, EventCall]

func (c *octopusServiceClient) GetEntry(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*EntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntryResponse)
	err := c.cc.Invoke(ctx, OctopusService_GetEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OctopusServiceServer is the server API for OctopusService service.
// All implementations must embed UnimplementedOctopusServiceServer
// for forward compatibility.
type OctopusServiceServer interface {
	// *
	// CallEvent
	//
	// Calls an event to all it's listeners and returns
	// with a possibly modified version from the listeners.
	CallEvent(context.Context, *Event) (*Event, error)
	// *
	// RegisterListener
	//
	// Registers an event handler.
	RegisterListener(context.Context, *EventHandler) (*emptypb.Empty, error)
	// *
	// UnregisterListener
	//
	// Unregisters an event handler.
	UnregisterListener(context.Context, *EventHandler) (*emptypb.Empty, error)
	// *
	// Listen
	//
	// Listens for events on the registered handlers.
	// Replies with a (possibly) modified response call (e.g. cancel).
	Listen(grpc.BidiStreamingServer[EventCall, EventCall]) error
	GetEntry(context.Context, *EntryRequest) (*EntryResponse, error)
	mustEmbedUnimplementedOctopusServiceServer()
}

// UnimplementedOctopusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOctopusServiceServer struct{}

func (UnimplementedOctopusServiceServer) CallEvent(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallEvent not implemented")
}
func (UnimplementedOctopusServiceServer) RegisterListener(context.Context, *EventHandler) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterListener not implemented")
}
func (UnimplementedOctopusServiceServer) UnregisterListener(context.Context, *EventHandler) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterListener not implemented")
}
func (UnimplementedOctopusServiceServer) Listen(grpc.BidiStreamingServer[EventCall, EventCall]) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedOctopusServiceServer) GetEntry(context.Context, *EntryRequest) (*EntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntry not implemented")
}
func (UnimplementedOctopusServiceServer) mustEmbedUnimplementedOctopusServiceServer() {}
func (UnimplementedOctopusServiceServer) testEmbeddedByValue()                        {}

// UnsafeOctopusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OctopusServiceServer will
// result in compilation errors.
type UnsafeOctopusServiceServer interface {
	mustEmbedUnimplementedOctopusServiceServer()
}

func RegisterOctopusServiceServer(s grpc.ServiceRegistrar, srv OctopusServiceServer) {
	// If the following call pancis, it indicates UnimplementedOctopusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OctopusService_ServiceDesc, srv)
}

func _OctopusService_CallEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctopusServiceServer).CallEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OctopusService_CallEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctopusServiceServer).CallEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _OctopusService_RegisterListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventHandler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctopusServiceServer).RegisterListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OctopusService_RegisterListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctopusServiceServer).RegisterListener(ctx, req.(*EventHandler))
	}
	return interceptor(ctx, in, info, handler)
}

func _OctopusService_UnregisterListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventHandler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctopusServiceServer).UnregisterListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OctopusService_UnregisterListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctopusServiceServer).UnregisterListener(ctx, req.(*EventHandler))
	}
	return interceptor(ctx, in, info, handler)
}

func _OctopusService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OctopusServiceServer).Listen(&grpc.GenericServerStream[EventCall, EventCall]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OctopusService_ListenServer = grpc.BidiStreamingServer[EventCall, EventCall]

func _OctopusService_GetEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctopusServiceServer).GetEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OctopusService_GetEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctopusServiceServer).GetEntry(ctx, req.(*EntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OctopusService_ServiceDesc is the grpc.ServiceDesc for OctopusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OctopusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.OctopusService",
	HandlerType: (*OctopusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallEvent",
			Handler:    _OctopusService_CallEvent_Handler,
		},
		{
			MethodName: "RegisterListener",
			Handler:    _OctopusService_RegisterListener_Handler,
		},
		{
			MethodName: "UnregisterListener",
			Handler:    _OctopusService_UnregisterListener_Handler,
		},
		{
			MethodName: "GetEntry",
			Handler:    _OctopusService_GetEntry_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _OctopusService_Listen_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/service.proto",
}
