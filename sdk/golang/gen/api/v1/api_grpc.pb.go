// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/api.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Octopus_Get_FullMethodName    = "/api.v1.Octopus/Get"
	Octopus_Call_FullMethodName   = "/api.v1.Octopus/Call"
	Octopus_Listen_FullMethodName = "/api.v1.Octopus/Listen"
)

// OctopusClient is the client API for Octopus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OctopusClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Call(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Entry, error)
	Listen(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ListenMessage, EventCall], error)
}

type octopusClient struct {
	cc grpc.ClientConnInterface
}

func NewOctopusClient(cc grpc.ClientConnInterface) OctopusClient {
	return &octopusClient{cc}
}

func (c *octopusClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, Octopus_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *octopusClient) Call(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Entry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Entry)
	err := c.cc.Invoke(ctx, Octopus_Call_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *octopusClient) Listen(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ListenMessage, EventCall], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Octopus_ServiceDesc.Streams[0], Octopus_Listen_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListenMessage, EventCall]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Octopus_ListenClient = grpc.BidiStreamingClient[ListenMessage, EventCall]

// OctopusServer is the server API for Octopus service.
// All implementations must embed UnimplementedOctopusServer
// for forward compatibility.
type OctopusServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Call(context.Context, *Object) (*Entry, error)
	Listen(grpc.BidiStreamingServer[ListenMessage, EventCall]) error
	mustEmbedUnimplementedOctopusServer()
}

// UnimplementedOctopusServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOctopusServer struct{}

func (UnimplementedOctopusServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedOctopusServer) Call(context.Context, *Object) (*Entry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedOctopusServer) Listen(grpc.BidiStreamingServer[ListenMessage, EventCall]) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedOctopusServer) mustEmbedUnimplementedOctopusServer() {}
func (UnimplementedOctopusServer) testEmbeddedByValue()                 {}

// UnsafeOctopusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OctopusServer will
// result in compilation errors.
type UnsafeOctopusServer interface {
	mustEmbedUnimplementedOctopusServer()
}

func RegisterOctopusServer(s grpc.ServiceRegistrar, srv OctopusServer) {
	// If the following call pancis, it indicates UnimplementedOctopusServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Octopus_ServiceDesc, srv)
}

func _Octopus_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctopusServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Octopus_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctopusServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Octopus_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctopusServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Octopus_Call_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctopusServer).Call(ctx, req.(*Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _Octopus_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OctopusServer).Listen(&grpc.GenericServerStream[ListenMessage, EventCall]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Octopus_ListenServer = grpc.BidiStreamingServer[ListenMessage, EventCall]

// Octopus_ServiceDesc is the grpc.ServiceDesc for Octopus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Octopus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Octopus",
	HandlerType: (*OctopusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Octopus_Get_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _Octopus_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Octopus_Listen_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/api.proto",
}
